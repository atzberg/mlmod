# library build -*- makefile -*-
SHELL = /bin/sh

# which file will be copied to Makefile.lammps
EXTRAMAKE = ./MAKE/Makefile.lammps.mlmod1

# ---------------------------------------------------------------------
# get svn or git revision numbers to include in the codes 

COMPILEDATETIME := -D'COMPILE_DATE_TIME="$(shell date)"'
SVNDEV          := -D'SVN_REV="$(shell svnversion -n ..)"'
GITDEV          := -D'GIT_REV="$(shell git rev-parse HEAD)"'

PWD=$(shell pwd)
BDIR=.

ABI_CXX11_FLAG=-D_GLIBCXX_USE_CXX11_ABI=1

$(info ================)
$(info ABI_CXX11_FLAG=$(ABI_CXX11_FLAG))
$(info PWD=${PWD})
$(info ================)

# ------ FILES ------

SRC = $(wildcard *.cpp)
INC = $(wildcard *.h)

# ------ DEFINITIONS ------

ARLIBNAME = libmlmod.a
SHAREDLIBNAME = libmlmod.so

OBJ = $(SRC:.cpp=.o)

default: lib_static

# ------ SETTINGS ------

.PHONY: clean lib_shared lib_static depend

# include any MPI settings needed for the ATC library to build with
# must be the same MPI library that LAMMPS is built with

CC = g++
CCFLAGS = -O3 -g -fPIC $(ABI_CXX11_FLAG) 
#CCFLAGS = -g -ggdb -fPIC $(ABI_CXX11_FLAG) 
CPPFLAGS = $(SVNDEV) $(GITDEV) $(COMPILEDATETIME) 

ARCHIVE = ar
ARCHFLAG = -rc

SHAREDLIB = g++
SHAREDFLAGS = -shared 
# below helpful in resolving most symbols 
# (note cycle between libmlmod.so and liblammps.so,
# so below flag will still leave LAMMPS_NS:USER-MLMOD unresolved,
# but helpful in seeing other unresolved symbols)
#SHAREDFLAGS = -shared -z defs

# ----- TORCH ------
# May need adjusting based on the system.
# The order also is import for libraries to resolve symbols.

ifeq ($(ABI_CXX11_FLAG),-D_GLIBCXX_USE_CXX11_ABI=0) 
  TORCH_INC = -DLIB_TORCH -I ${BDIR}/libtorch_no_cxx11/include/torch/csrc/api/include -I ${BDIR}/libtorch_no_cxx11/include
  TORCH_PATH = -L ${BDIR}/libtorch_no_cxx11/lib
  TORCH_LIB = -l torch_cpu -l torch -l c10
else
  TORCH_INC = -DLIB_TORCH -I ${BDIR}/libtorch_cxx11/include/torch/csrc/api/include -I ${BDIR}/libtorch_cxx11/include
  TORCH_PATH = -L ${BDIR}/libtorch_cxx11/lib
  TORCH_LIB = -l torch_cpu -l torch -l c10
endif

#WARNING: order is import for libraries (order dependent to resolving)

# ----- FFT ------
# FFT library
# see discussion in Section 3.5.2 of manual
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

#FFT_INC =       -DFFT_FFTW -I/opt/fftw3-gcc/include
#FFT_PATH =      -L/opt/fftw3-gcc/lib

FFT_INC = -DFFT_FFTW -I/usr/include
FFT_PATH = -L/usr/lib/x86_64-linux-gnu
FFT_LIB = -lfftw3

MLMOD_INC = -I ./
MLMOD_PATH = 
MLMOD_LIB = 

LAMMPS_INC = -I ${BDIR}/../../src -I ${BDIR}/../../src/STUBS
LAMMPS_PATH = 
LAMMPS_LIB =
# below would allow resolving all symbols 
# (however cycle between libmlmod.so and liblammps.so) 
#LAMMPS_PATH = -L ${BDIR}/../../src 
#LAMMPS_LIB = -l lammps_atz_mlmod_serial_ubuntu_debug 


# Debian 9 (may need local version, QueryString missing)
TINY_XML_INC = -I ${BDIR}/tinyxml2
TINY_XML_PATH = -L ${BDIR}/tinyxml2
TINY_XML_LIB = -l tinyxml2
#TINY_XML_INC = -I /usr/include
#TINY_XML_PATH = -L /usr/lib/x86_64-linux-gnu
#TINY_XML_LIB = -l tinyxml2

LAPACKE_INC = -I /usr/include/lapacke
LAPACKE_PATH = -L /usr/lib/x86_64-linux-gnu
LAPACKE_LIB = -l lapacke -l lapack -l blas

# ----- EXTRAs ------
EXTRA_INC = $(TORCH_INC) $(TINY_XML_INC) $(LAPACKE_INC) $(LAMMPS_INC) $(MLMOD_INC) $(TMP_INC) $(FFT_INC) 
EXTRA_PATH = $(TORCH_PATH) $(TINY_XML_PATH) $(LAPACKE_PATH) $(LAMMPS_PATH) $(MLMOD_PATH) $(TMP_PATH) $(FFT_PATH)
EXTRA_LIB = $(TORCH_LIB) $(TINY_XML_LIB) $(LAPACKE_LIB) $(LAMMPS_LIB) $(MLMOD_LIB) $(TMP_LIB) $(FFT_LIB) 

# ------ MAKE PROCEDURE ------

lib_shared: $(OBJ)
	$(SHAREDLIB) $(SHAREDFLAGS) $(EXTRA_INC) $(EXTRA_PATH) -o $(SHAREDLIBNAME) $(OBJ)  $(EXTRA_LIB) 
	@echo Finished building library.

lib_static: $(OBJ)
	$(ARCHIVE) $(ARFLAGS) $(ARLIBNAME) $(OBJ)
	@echo Finished building library.

# ------ COMPILE RULES ------

%.o:%.cpp
	$(CC) $(CPPFLAGS) $(CCFLAGS) $(EXTRA_PATH) $(EXTRA_INC) -c $<

# ------ DEPENDENCIES ------

depend .depend : fastdep.exe $(SRC)
	@./fastdep.exe $(INCFLAGS) -- $^ > .depend || exit 1

fastdep.exe: ../../src/DEPEND/fastdep.c
	@cc -O -o $@ $<

# ------ CLEAN ------

clean:
	-rm -f *.o *~ .depend $(SHAREDLIBNAME) $(ARLIBNAME) fastdep.exe

sinclude .depend

